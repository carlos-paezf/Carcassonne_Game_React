import { useContext, useState } from "react";
import { TILES_PER_HAND, ToastType } from '../constants/index';
import { GameInfoContext, ToastContext } from "../context";
import { Tile } from "../game-logic/tile";


export const useHandContext = () => {
    const { gameInfo, setGameInfo } = useContext( GameInfoContext );
    const { addToast } = useContext( ToastContext );

    const [ hand, setHand ] = useState<Tile[]>( [] );
    const { numberDiscards, tilesInDeck, turn } = gameInfo;

    /**
     * "The function initialHand() returns an array of Tile objects, each of which is generated by the
     * static method Tile.generateTile()."
     * 
     * @returns An array of tiles.
     */
    const initialHand = () => {
        const hand = [];

        for ( let i = 0; i < TILES_PER_HAND; i++ ) {
            hand.push( Tile.generateTile() );
        }

        setGameInfo( { ...gameInfo, tilesInDeck: tilesInDeck - TILES_PER_HAND } );

        return hand;
    };


    /**
     * "If there are no more tiles in the deck, then show an error message, otherwise add a new tile to
     * the hand."
     * 
     * Drawing a tile from the deck and adding it to the player's hand. 
     */
    const appendTileToHand = () => {
        if ( tilesInDeck === 0 ) return addToast( {
            message: 'There are no more cards to play',
            type: ToastType.ERROR
        } );

        setHand( [ ...hand, Tile.generateTile() ] );

        setGameInfo( { ...gameInfo, tilesInDeck: tilesInDeck - 1 } );
    };


    /**
     * "If the player has not used up all of their discards, then the player's hand is emptied, the
     * turn is incremented, the discard counter is decremented, and the player draws four new tiles."
     * 
     * If the number of discards is less than or equal to zero, then return an error message. If the
     * number of tiles in the deck is less than the number of tiles per hand, then return an error
     * message. Otherwise, set the hand to an empty array, set the game info to the current game info
     * plus one turn and one less discard, and then append a tile to the hand.
     */
    const discardHand = () => {
        if ( numberDiscards <= 0 ) return addToast( {
            message: 'You cannot discard your current hand. You already used the maximum amount of discards',
            type: ToastType.ERROR
        } );

        if ( tilesInDeck < TILES_PER_HAND ) return addToast( {
            message: 'You cannot discard your current hand. There are not enough cards to distribute a new hand.',
            type: ToastType.ERROR
        } );

        setHand( [] );
        setGameInfo( { ...gameInfo, turn: turn + 1, numberDiscards: numberDiscards - 1 } );

        for ( let i = 0; i < TILES_PER_HAND; i++ ) {
            appendTileToHand();
        }
    };


    return {
        hand: initialHand(), appendTileToHand, discardHand
    };
};